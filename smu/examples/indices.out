There are several ways to efficiently get specific sets of molecules

First is a lookup by conformer id
Looking up 57001 returns conformer with id 57001 and bond topology with SMILES O=CF
Looking up a conformer id not in the DB raises a KeyError

Looking up by bond topology id will return zero or more conformers
Querying for bond topology id 7984 returned 2 conformers
Note that the conformers returned may have multiple bond topologies,and may or may not have the requested bond topology first
    Result with conformer_id 7984002
        has bond topology with id 7986 and SMILES O=[N+](O)OO[O-]
        has bond topology with id 7984 and SMILES [O-][N+]1(O)OOO1
    Result with conformer_id 7984001
        has bond topology with id 7986 and SMILES O=[N+](O)OO[O-]
        has bond topology with id 7984 and SMILES [O-][N+]1(O)OOO1

Finding by SMILES is essentially equivalent to finding by bond topology id
With query O=NONNNO we found 43 results
Note that the SMILES are canonicalized internally, you do not need to
So the equivalent SMILES query ONNNON=O returns the same 43 results

You can also find all the conformers with a given stoichiometry
For example, "cn2o3" finds 38 results
The first couple of conformer ids are: [12449005, 12457001, 14000001, 14115001, 14115002]

You may note that there is a "find_by_expanded_stoichiometry" method in smu_sqlite
This is primarily intended to support the "topology queries" that are documented in query_sqlite.py
Since these topology queries are more involved to set up, it is recommended that you use query_sqlite.py for that kind of query
